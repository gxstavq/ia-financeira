# -*- coding: utf-8 -*-

# Importa as ferramentas necess√°rias
import os
import json
import requests
import datetime
import csv
import re
import random
from flask import Flask, request

# --- CONFIGURA√á√ÉO DA APLica√ß√£o FLASK ---
app = Flask(__name__)

# --- CREDENCIAIS (CARREGADAS DO AMBIENTE) ---
ACCESS_TOKEN = os.getenv("ACCESS_TOKEN")
PHONE_NUMBER_ID = os.getenv("PHONE_NUMBER_ID")
VERIFY_TOKEN = os.getenv("VERIFY_TOKEN")

# --- CONFIGURA√á√ÉO DOS ARQUIVOS DE DADOS ---
DATA_DIR = os.getenv('RENDER_DISK_PATH', '.')
CSV_GASTOS = os.path.join(DATA_DIR, "gastos_usuarios.csv")
CSV_ENTRADAS = os.path.join(DATA_DIR, "entradas_usuarios.csv")
CSV_SALDO = os.path.join(DATA_DIR, "saldo_usuarios.csv")
CSV_DIVIDAS = os.path.join(DATA_DIR, "dividas_usuarios.csv")

# Define o fuso hor√°rio para o Brasil (Bras√≠lia)
TIMEZONE = datetime.timezone(datetime.timedelta(hours=-3))

# --- INTELIG√äNCIA DA IA: EXPANS√ÉO MASSIVA DE CATEGORIAS ---
# Esta se√ß√£o define as palavras-chave que a IA usa para categorizar automaticamente cada gasto.
CATEGORY_KEYWORDS = {
    "Alimenta√ß√£o": [
        "restaurante", "almo√ßo", "janta", "ifood", "rappi", "mercado", "comida", "lanche", "pizza", "hamburguer", 
        "padaria", "caf√©", "sorvete", "a√ßa√≠", "supermercado", "hortifruti", "sacol√£o", "feira", "a√ßougue", 
        "peixaria", "doces", "bolo", "salgado", "esfiha", "pastel", "churrasco", "bebida", "refrigerante", 
        "cerveja", "vinho", "suco", "√°gua", "energ√©tico", "quitanda", "mercearia", "conveni√™ncia", "delivery",
        "marmita", "quentinha", "sushi", "temaki", "japon√™s", "chin√™s", "italiano", "mexicano", "√°rabe",
        "p√£o", "leite", "queijo", "presunto", "frutas", "verduras", "legumes", "carne", "frango", "peixe",
        "ovos", "arroz", "feij√£o", "macarr√£o", "molho", "biscoito", "bolacha", "chocolate", "bombom", "cereal", "chiclete"
    ],
    "Transporte": [
        "uber", "99", "t√°xi", "gasolina", "etanol", "diesel", "combust√≠vel", "metr√¥", "√¥nibus", "trem", "passagem", 
        "estacionamento", "ped√°gio", "rod√≠zio", "multa", "ipva", "licenciamento", "seguro do carro", "mec√¢nico",
        "oficina", "troca de √≥leo", "pneu", "manuten√ß√£o do carro", "lavagem", "lava-r√°pido", "aluguel de carro",
        "passagem a√©rea", "aeroporto", "rodovi√°ria", "barca", "balsa", "frete", "carreto", "recarga bilhete √∫nico"
    ],
    "Moradia": [
        "aluguel", "condom√≠nio", "luz", "√°gua", "internet", "g√°s", "iptu", "diarista", "faxineira", "limpeza", 
        "reforma", "manuten√ß√£o", "conserto", "eletricista", "encanador", "pintor", "marceneiro", "material de constru√ß√£o",
        "tinta", "cimento", "areia", "ferramenta", "decora√ß√£o", "m√≥vel", "sof√°", "cama", "mesa", "cadeira",
        "eletrodom√©stico", "geladeira", "fog√£o", "microondas", "m√°quina de lavar", "tv a cabo", "seguran√ßa", "alarme"
    ],
    "Vestu√°rio e Acess√≥rios": [
        "roupa", "roupas", "t√™nis", "sapato", "bota", "sand√°lia", "chinelo", "camiseta", "camisa", "blusa", "cal√ßa",
        "bermuda", "short", "saia", "vestido", "casaco", "jaqueta", "moletom", "terno", "blazer", "gravata",
        "meia", "cueca", "calcinha", "suti√£", "pijama", "biqu√≠ni", "sunga", "mai√¥", "acess√≥rio", "bolsa",
        "carteira", "cinto", "chap√©u", "bon√©", "gorro", "cachecol", "luva", "√≥culos", "rel√≥gio", "joia",
        "brinco", "colar", "pulseira", "anel", "maquiagem", "batom", "base", "r√≠mel", "perfume", "creme",
        "cosm√©ticos", "lavanderia", "costureira", "ajuste de roupa", "sapataria"
    ],
    "Lazer": [
        "cinema", "show", "teatro", "concerto", "bar", "balada", "festa", "viagem", "hotel", "pousada", "hostel",
        "passagem de avi√£o", "streaming", "spotify", "netflix", "hbo", "disney", "amazon prime", "youtube premium",
        "jogo", "game", "steam", "playstation", "xbox", "nintendo", "ingresso", "passeio", "parque", "praia",
        "clube", "hobby", "instrumento musical", "artesanato", "dan√ßa", "luta", "esporte", "futebol", "ingresso de jogo"
    ],
    "Sa√∫de": [
        "farm√°cia", "rem√©dio", "medicamento", "m√©dico", "consulta", "plano de sa√∫de", "conv√™nio", "academia", 
        "suplemento", "whey", "creatina", "dentista", "aparelho", "exame", "laborat√≥rio", "terapia", "psic√≥logo",
        "fisioterapia", "pilates", "yoga", "nutricionista", "oftalmologista", "√≥culos de grau", "lente de contato",
        "veterin√°rio", "pet shop", "ra√ß√£o", "vacina do pet"
    ],
    "Educa√ß√£o": [
        "curso", "livro", "ebook", "faculdade", "universidade", "mensalidade", "material escolar", "caderno",
        "caneta", "l√°pis", "mochila", "escola", "col√©gio", "aula particular", "professor", "palestra",
        "workshop", "semin√°rio", "inscri√ß√£o", "concurso", "certifica√ß√£o", "idiomas", "ingl√™s", "espanhol"],
}

# --- MENSAGENS E DICAS ---
COMMANDS_MESSAGE = """
Ol√°! Sou sua assistente financeira pessoal. üí∏

Voc√™ pode falar comigo como se estivesse conversando com algu√©m!

*Exemplos do que voc√™ pode me dizer:*
- `gastei 25,50 no almo√ßo`
- `recebi 3500 do sal√°rio`
- `tenho uma conta de luz de 180 que vence 15/09`
- `paguei a conta de luz`
- `qual meu saldo?`
- `o que gastei hoje?`

*Principais Comandos:*
üìä *RELAT√ìRIOS*
- `saldo`: Para ver seu saldo atual.
- `resumo financeiro`: Vis√£o geral com saldo e d√≠vidas.
- `gastos hoje` (ou `semana`/`m√™s`): Lista seus gastos.
- `entradas e sa√≠das hoje` (ou `semana`/`m√™s`): Mostra o balan√ßo.
- `minhas d√≠vidas`: Lista suas d√≠vidas pendentes.

‚öôÔ∏è *A√á√ïES*
- `apagar √∫ltimo gasto`: Remove o √∫ltimo gasto registrado.
- `paguei [descri√ß√£o da d√≠vida]`: Marca uma d√≠vida como paga e registra o gasto.
- `dica`: Te dou uma dica financeira.

Qualquer d√∫vida, √© s√≥ chamar! üòä
"""
FINANCIAL_TIPS = [
    "Anote todos os seus gastos, at√© os pequenos. Isso te ajuda a entender para onde seu dinheiro est√° indo.", "Crie um or√ßamento mensal. A regra 50/30/20 (50% necessidades, 30% desejos, 20% poupan√ßa) √© um bom come√ßo!", "Antes de uma compra por impulso, espere 24 horas. Muitas vezes, a vontade passa e voc√™ economiza.", "Tenha uma reserva de emerg√™ncia. O ideal √© ter o equivalente a 3 a 6 meses do seu custo de vida guardado.", "Compare pre√ßos antes de comprar. A internet facilita muito a pesquisa e a economia.", "Evite usar o cart√£o de cr√©dito para compras do dia a dia. √â mais f√°cil perder o controle dos gastos assim.", "Defina metas financeiras claras, como 'guardar R$1000 para uma viagem'. Metas te mant√™m motivado."
]

# --- FUN√á√ïES AUXILIARES DE INTERPRETA√á√ÉO ---

def parse_monetary_value(text):
    if not isinstance(text, str): return None
    pattern = r'(?:R\$\s*)?([\d.,]+)'
    matches = re.findall(pattern, text)
    if not matches: return None
    best_match = max(matches, key=lambda m: len(re.sub(r'\D', '', m)))
    if not best_match: return None
    standardized_value = best_match.replace('.', '').replace(',', '.')
    if len(standardized_value.split('.')) == 2 and len(standardized_value.split('.')[1]) > 2:
         standardized_value = standardized_value.replace('.', '')
    try:
        return float(standardized_value)
    except (ValueError, IndexError):
        return None

def extract_all_transactions(text):
    transactions = []
    clauses = re.split(r'\s+e\s+|\s+depois\s+|,\s*(?!\d{3})', text)
    for clause in clauses:
        value = parse_monetary_value(clause)
        if value is not None:
            transactions.append({"value": value, "context": clause})
    return transactions

def extract_due_date(text):
    match = re.search(r'(\d{1,2}/\d{1,2})', text)
    return match.group(0) if match else "Sem data"

def clean_description(text, value):
    if value is not None:
        formatted_value_br = f"{value:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")
        text = text.replace(formatted_value_br, "").replace(str(value), "").replace(str(int(value)), "")
    noise_patterns = [
        r'\b(hoje|gastei|comprei|paguei|foi|deu|custou|no valor de|de|acabei de pedir|acabei de ganhar)\b',
        r'\b(recebi|sal√°rio|ganhei|dep√≥sito|rendimento|entrada|caixinha|gorjeta)\b',
        r'\b(d√≠vida|conta|vence|vencimento|apagar|√∫ltimo|parcela|boleto)\b',
        r'r\$', 'reais', r'\b(minha|meu|pro dia|com o|para a|pra)\b', r'(\d{1,2}/\d{1,2})'
    ]
    for pattern in noise_patterns:
        text = re.sub(pattern, '', text, flags=re.IGNORECASE)
    text = re.sub(r'\s+', ' ', text).strip(" ,.:;")
    return text.capitalize() if text else "Gasto geral"

def infer_category(description):
    desc_lower = description.lower()
    for category, keywords in CATEGORY_KEYWORDS.items():
        if any(keyword in desc_lower for keyword in keywords): return category
    return "Outros"

# --- FUN√á√ïES DE L√ìGICA FINANCEIRA ---

def write_to_csv(filepath, header, row):
    file_exists = os.path.exists(filepath)
    try:
        with open(filepath, 'a', newline='', encoding='utf-8') as file:
            writer = csv.writer(file, delimiter=';')
            if not file_exists or os.path.getsize(filepath) == 0: writer.writerow(header)
            writer.writerow(row)
        return True
    except IOError as e:
        print(f"Erro de I/O: {e}"); return False

def get_balance(user_id):
    if not os.path.exists(CSV_SALDO): return 0.0
    with open(CSV_SALDO, 'r', encoding='utf-8') as file:
        reader = csv.reader(file, delimiter=';')
        try: next(reader, None)
        except StopIteration: return 0.0
        for row in reader:
            if row and row[0] == user_id: return float(row[1])
    return 0.0

def set_balance(user_id, new_balance):
    lines, user_found = [], False
    if os.path.exists(CSV_SALDO):
        with open(CSV_SALDO, 'r', encoding='utf-8') as file: lines = file.readlines()
    with open(CSV_SALDO, 'w', encoding='utf-8') as file:
        if not lines or not lines[0].strip().lower().startswith("userid"): file.write("UserID;Saldo\n")
        for line in lines:
            if line.strip().lower().startswith("userid"):
                if "userid;saldo" not in line.lower(): file.write("UserID;Saldo\n")
                else: file.write(line)
                continue
            if line.startswith(user_id):
                file.write(f"{user_id};{new_balance:.2f}\n"); user_found = True
            elif line.strip(): file.write(line)
        if not user_found: file.write(f"{user_id};{new_balance:.2f}\n")

def record_expense(user_id, value, description, update_balance=True):
    now = datetime.datetime.now(TIMEZONE)
    category = infer_category(description)
    row = [user_id, now.strftime("%Y-%m-%d %H:%M:%S"), description, f"{value:.2f}", category]
    if write_to_csv(CSV_GASTOS, ["UserID", "DataHora", "Descricao", "Valor", "Categoria"], row):
        if update_balance:
            set_balance(user_id, get_balance(user_id) - value)
        return {"description": description, "value": value, "category": category}
    return None

def record_income(user_id, value, description):
    now = datetime.datetime.now(TIMEZONE)
    today_str_msg = now.strftime("%d/%m")
    new_balance = get_balance(user_id) + value
    set_balance(user_id, new_balance)
    write_to_csv(CSV_ENTRADAS, ["UserID", "DataHora", "Descricao", "Valor"], [user_id, now.strftime("%Y-%m-%d %H:%M:%S"), description, f"{value:.2f}"])
    return f"üí∞ Entrada registrada em {today_str_msg}!\n- {description}: *R${value:.2f}*\n\nSeu novo saldo √© *R${new_balance:.2f}*."

def record_debt(user_id, value, description, due_date):
    write_to_csv(CSV_DIVIDAS, ["UserID", "DataVencimento", "Descricao", "Valor"], [user_id, due_date, description, f"{value:.2f}"])
    return f"üßæ D√≠vida registrada!\n- {description}: *R${value:.2f}*\n- Vencimento: {due_date}"

def pay_debt(user_id, text):
    if not os.path.exists(CSV_DIVIDAS): return "Voc√™ n√£o tem nenhuma d√≠vida para pagar."
    search_desc = re.sub(r'\b(paguei|a|o|conta|fatura|boleto|de|da|do)\b', '', text, flags=re.IGNORECASE).strip()
    lines, debt_found = [], None
    with open(CSV_DIVIDAS, 'r', encoding='utf-8') as file: lines = file.readlines()
    for i, line in reversed(list(enumerate(lines))):
        if line.strip().startswith(user_id) and len(line.strip().split(';')) > 2:
            parts = line.strip().split(';')
            if search_desc.lower() in parts[2].lower():
                debt_found = {"index": i, "desc": parts[2], "value": float(parts[3])}; break
    if not debt_found: return f"N√£o encontrei a d√≠vida '{search_desc}'. Verifique a lista em 'minhas d√≠vidas'."
    lines.pop(debt_found["index"])
    with open(CSV_DIVIDAS, 'w', encoding='utf-8') as file: file.writelines(lines)
    record_expense(user_id, debt_found['value'], f"Pagamento: {debt_found['desc']}")
    return f"‚úÖ D√≠vida '{debt_found['desc']}' paga com sucesso!\nSeu novo saldo √© *R${get_balance(user_id):.2f}*."

def delete_last_expense(user_id):
    if not os.path.exists(CSV_GASTOS): return "Voc√™ n√£o tem gastos para apagar."
    lines, last_expense_index = [], -1
    with open(CSV_GASTOS, 'r', encoding='utf-8') as file: lines = file.readlines()
    for i, line in reversed(list(enumerate(lines))):
        if line.strip().startswith(user_id): last_expense_index = i; break
    if last_expense_index == -1: return "N√£o encontrei gastos seus para apagar."
    deleted_line_parts = lines.pop(last_expense_index).strip().split(';')
    deleted_value = float(deleted_line_parts[3])
    with open(CSV_GASTOS, 'w', encoding='utf-8') as file: file.writelines(lines)
    set_balance(user_id, get_balance(user_id) + deleted_value)
    return f"üóëÔ∏è √öltimo gasto apagado!\n- {deleted_line_parts[2]}: R${deleted_value:.2f}\nO valor foi devolvido. Novo saldo: *R${get_balance(user_id):.2f}*."

def get_debts_report(user_id):
    if not os.path.exists(CSV_DIVIDAS): return "Voc√™ n√£o tem nenhuma d√≠vida registrada. Parab√©ns! üéâ"
    report_lines, total_debts = ["üìã *Suas D√≠vidas Pendentes* üìã\n"], 0.0
    with open(CSV_DIVIDAS, 'r', encoding='utf-8') as file:
        reader = csv.reader(file, delimiter=';'); next(reader, None)
        for row in reader:
            if row and row[0] == user_id:
                report_lines.append(f"- {row[2]} (Vence: {row[1]}): R${float(row[3]):.2f}"); total_debts += float(row[3])
    if len(report_lines) == 1: return "Voc√™ n√£o tem nenhuma d√≠vida registrada. Parab√©ns! üéâ"
    report_lines.append(f"\n*Total de D√≠vidas: R${total_debts:.2f}*")
    return "\n".join(report_lines)

def get_financial_summary(user_id):
    balance = get_balance(user_id)
    total_debts = sum(float(row[3]) for row in csv.reader(open(CSV_DIVIDAS), delimiter=';') if len(row) > 3 and row[0] == user_id) if os.path.exists(CSV_DIVIDAS) else 0.0
    return f"üìä *Resumo Financeiro*\n\n- Saldo em conta: *R${balance:.2f}*\n- Total de d√≠vidas: *R${total_debts:.2f}*"

def get_period_report(user_id, period):
    if not os.path.exists(CSV_GASTOS): return "Nenhum gasto registrado ainda."
    now, total_spent, report_lines = datetime.datetime.now(TIMEZONE), 0.0, []
    if period == "dia": start_date, period_name = now.date(), "hoje"
    elif period == "semana": start_date, period_name = now.date() - datetime.timedelta(days=now.weekday()), "nesta semana"
    else: start_date, period_name = now.date().replace(day=1), "neste m√™s"
    report_lines.append(f"üßæ *Seus gastos {period_name}* üßæ\n")
    with open(CSV_GASTOS, 'r', encoding='utf-8') as file:
        reader = csv.reader(file, delimiter=';'); next(reader, None)
        for row in reader:
            if row and row[0] == user_id:
                if datetime.datetime.strptime(row[1], "%Y-%m-%d %H:%M:%S").date() >= start_date:
                    report_lines.append(f"- {row[2]}: R${float(row[3]):.2f}"); total_spent += float(row[3])
    if len(report_lines) == 1: return f"Voc√™ n√£o teve gastos {period_name}. üéâ"
    report_lines.append(f"\n*Total gasto: R${total_spent:.2f}*")
    return "\n".join(report_lines)

def get_io_summary(user_id, period):
    now, total_in, total_out = datetime.datetime.now(TIMEZONE), 0.0, 0.0
    if period == "dia": start_date, period_name = now.date(), "de hoje"
    elif period == "semana": start_date, period_name = now.date() - datetime.timedelta(days=now.weekday()), "da semana"
    else: start_date, period_name = now.date().replace(day=1), "do m√™s"
    if os.path.exists(CSV_GASTOS):
        with open(CSV_GASTOS, 'r', encoding='utf-8') as file:
            reader = csv.reader(file, delimiter=';'); next(reader, None)
            for row in reader:
                if row and row[0] == user_id and datetime.datetime.strptime(row[1], "%Y-%m-%d %H:%M:%S").date() >= start_date: total_out += float(row[3])
    if os.path.exists(CSV_ENTRADAS):
        with open(CSV_ENTRADAS, 'r', encoding='utf-8') as file:
            reader = csv.reader(file, delimiter=';'); next(reader, None)
            for row in reader:
                if row and row[0] == user_id and datetime.datetime.strptime(row[1], "%Y-%m-%d %H:%M:%S").date() >= start_date: total_in += float(row[3])
    return f"üí∏ *Balan√ßo {period_name}*\n\n- Entradas: *R${total_in:.2f}*\n- Sa√≠das: *R${total_out:.2f}*"

# --- FUN√á√ÉO DE ENVIO DE MENSAGEM ---
def send_whatsapp_message(phone_number, message_text):
    if not all([ACCESS_TOKEN, PHONE_NUMBER_ID]): print("ERRO: Credenciais n√£o configuradas."); return
    url = f"https://graph.facebook.com/v19.0/{PHONE_NUMBER_ID}/messages"
    headers = {"Authorization": f"Bearer {ACCESS_TOKEN}", "Content-Type": "application/json"}
    data = {"messaging_product": "whatsapp", "to": phone_number, "text": {"body": message_text}}
    try:
        response = requests.post(url, headers=headers, json=data); response.raise_for_status()
        print(f"Mensagem enviada para {phone_number}.")
    except requests.exceptions.RequestException as e: print(f"Erro ao enviar mensagem: {e}")

# --- PROCESSADOR DE COMANDOS (L√ìGICA DE REGRAS) ---
def process_message(user_id, user_name, message_text):
    
    # --- MILHARES DE COMANDOS (EXPANS√ÉO MASSIVA) ---
    
    # SAUDA√á√ïES E CONVERSA B√ÅSICA
    CMD_GREETINGS = [
        "oi", "ol√°", "ola", "bom dia", "boa tarde", "boa noite", "e a√≠", "eae", "opa", "salve", 
        "tudo bem?", "td bem?", "tudo bom?", "td bom?", "como vai?", "blz?", "beleza?"
    ]
    CMD_HELP = [
        "ajuda", "comandos", "menu", "come√ßar", "op√ß√µes", "o que voc√™ faz", "como funciona", "help",
        "preciso de ajuda", "me ajuda", "quais os comandos", "lista de comandos", "como usar"
    ]

    # CONSULTAS DE SALDO
    CMD_GET_SALDO = [
        "qual meu saldo", "ver saldo", "quanto tenho", "meu dinheiro", "dinheiro em conta", "grana", 
        "ver a grana", "kd meu dinheiro", "quanto de dinheiro eu tenho", "saldo", "mostra o saldo",
        "meu saldo", "meu saldo por favor", "poderia ver meu saldo?", "consulta de saldo", "checar saldo",
        "qual o valor na minha conta?", "qto tenho?", "quanto eu tenho?", "quanto me resta?"
    ]
    
    # DEFINI√á√ÉO DE SALDO INICIAL
    CMD_SET_SALDO = [
        "meu saldo √©", "tenho na conta", "definir saldo", "saldo inicial", "come√ßar com", 
        "meu saldo atual √©", "tenho um total de", "meu saldo inicial √©", "iniciar com", "tenho"
    ]

    # RESUMO E RELAT√ìRIOS GERAIS
    CMD_RESUMO = [
        "resumo", "resumo financeiro", "vis√£o geral", "como estou", "minhas finan√ßas", 
        "situa√ß√£o financeira", "meu status", "como est√£o as contas", "faz um resumo pra mim",
        "resumo geral", "balan√ßo geral"
    ]
    
    # A√á√ïES DE CORRE√á√ÉO
    CMD_APAGAR = [
        "apagar √∫ltimo", "excluir √∫ltimo", "cancelar √∫ltimo", "apaga o √∫ltimo", "deleta o √∫ltimo", 
        "foi errado", "lancei errado", "apagar ultimo gasto", "remove o ultimo", "excluir lan√ßamento"
    ]

    # DICAS
    CMD_DICA = [
        "dica", "dica financeira", "me d√™ uma dica", "uma dica", "conselho", "me ajuda a economizar", 
        "conselho financeiro", "preciso de uma dica", "manda uma dica"
    ]

    # RELAT√ìRIOS DE GASTOS
    CMD_GASTOS = [
        "gastos", "o que gastei", "relat√≥rio de gastos", "sa√≠das", "minhas despesas", 
        "onde gastei", "com o que gastei", "lista de gastos", "ver gastos", "meus gastos",
        "mostra as sa√≠das", "quais foram as despesas"
    ]
    
    # RELAT√ìRIOS DE ENTRADAS E SA√çDAS
    CMD_BALANCO = [
        "entradas e sa√≠das", "entrou e saiu", "balan√ßo", "fluxo de caixa", "relat√≥rio de transa√ß√µes", 
        "movimenta√ß√µes", "o que entrou e o que saiu", "balan√ßo do per√≠odo"
    ]

    # REGISTRO DE D√çVIDAS
    CMD_REGISTRAR_DIVIDA = [
        "d√≠vida", "divida", "parcela", "boleto", "conta", "vencimento", "tenho que pagar", 
        "anota uma conta", "registra uma d√≠vida", "fatura", "tenho uma conta", "lan√ßar conta"
    ]
    
    # PAGAMENTO DE D√çVIDAS
    CMD_PAGAR_DIVIDA = [
        "paguei", "j√° paguei", "pagamento de", "quitei", "dar baixa", "paguei a conta",
        "pagamento da fatura", "paguei o boleto", "quitar d√≠vida"
    ]
    
    # CONSULTA DE D√çVIDAS
    CMD_VER_DIVIDAS = [
        "minhas d√≠vidas", "ver d√≠vidas", "quais minhas contas", "o que devo", "lista de d√≠vidas", 
        "contas a pagar", "o que tenho pra pagar", "ver boletos"
    ]

    # REGISTRO DE ENTRADAS
    CMD_ENTRADA = [
        "recebi", "sal√°rio", "ganhei", "dep√≥sito", "rendimento", "entrada", "pix", "me pagaram", 
        "um amigo me pagou", "salario", "recebimento", "caiu na conta", "caixinha", "gorjeta", "bico", "freela"
    ]
    
    # 1. Hierarquia de Inten√ß√£o (a ordem importa)
    
    # Conversa B√°sica
    if message_text in CMD_GREETINGS: return f"Ol√°, {user_name}! Como posso te ajudar hoje? üòä"
    if any(cmd in message_text for cmd in CMD_HELP): return COMMANDS_MESSAGE

    value_in_message = parse_monetary_value(message_text)
    
    # A√ß√µes de Saldo (alta prioridade para evitar conflitos com "conta")
    if any(cmd in message_text for cmd in CMD_SET_SALDO) and value_in_message is not None:
        # Condi√ß√£o extra para evitar que "gastei 50 na conta de luz" seja confundido com "tenho na conta 50"
        if not any(gasto in message_text for gasto in ["gastei", "paguei", "comprei"]):
            set_balance(user_id, value_in_message)
            return f"‚úÖ Saldo definido! Seu saldo atual √© *R${value_in_message:.2f}*."

    if any(cmd in message_text for cmd in CMD_GET_SALDO):
        return f"üíµ Seu saldo atual √© de *R${get_balance(user_id):.2f}*."

    # A√ß√µes e Relat√≥rios Diretos
    if any(cmd in message_text for cmd in CMD_RESUMO): return get_financial_summary(user_id)
    if any(cmd in message_text for cmd in CMD_APAGAR): return delete_last_expense(user_id)
    if any(cmd in message_text for cmd in CMD_DICA): return random.choice(FINANCIAL_TIPS)
    if any(cmd in message_text for cmd in CMD_VER_DIVIDAS): return get_debts_report(user_id)
    if any(cmd in message_text for cmd in CMD_PAGAR_DIVIDA): return pay_debt(user_id, message_text)

    # Relat√≥rios com Per√≠odo
    if any(cmd in message_text for cmd in CMD_GASTOS):
        if any(p in message_text for p in ["hoje", "hj", "de hoje"]): return get_period_report(user_id, "dia")
        if "semana" in message_text: return get_period_report(user_id, "semana")
        if "m√™s" in message_text: return get_period_report(user_id, "m√™s")
    if any(cmd in message_text for cmd in CMD_BALANCO):
        if any(p in message_text for p in ["hoje", "hj", "de hoje"]): return get_io_summary(user_id, "dia")
        if "semana" in message_text: return get_io_summary(user_id, "semana")
        if "m√™s" in message_text: return get_io_summary(user_id, "m√™s")

    # Transa√ß√µes Financeiras
    if any(keyword in message_text for keyword in CMD_REGISTRAR_DIVIDA):
        if value_in_message is not None:
            description = clean_description(message_text, value_in_message)
            due_date = extract_due_date(message_text)
            return record_debt(user_id, value_in_message, description, due_date)

    if any(keyword in message_text for keyword in CMD_ENTRADA) and value_in_message is not None:
        description = clean_description(message_text, value_in_message)
        if not description: description = "Entrada"
        return record_income(user_id, value_in_message, description)

    # Fallback: Se n√£o for nada acima, assume que √© um gasto
    transactions = extract_all_transactions(message_text)
    if transactions:
        if len(transactions) > 1:
            today_str_msg = datetime.datetime.now(TIMEZONE).strftime("%d/%m")
            response_lines = [f"Entendido! Registrei {len(transactions)} gastos para voc√™ em {today_str_msg}:"]
            total_value = sum(t['value'] for t in transactions)
            for trans in transactions:
                description = clean_description(trans['context'], trans['value'])
                result = record_expense(user_id, trans['value'], description, update_balance=False)
                if result: response_lines.append(f"- {result['description']}: *R${result['value']:.2f}* ({result['category']})")
            set_balance(user_id, get_balance(user_id) - total_value)
            response_lines.append(f"\nSeu novo saldo √© *R${get_balance(user_id):.2f}*.")
            return "\n".join(response_lines)
        
        elif len(transactions) == 1:
            value = transactions[0]['value']
            description = clean_description(message_text, value)
            result = record_expense(user_id, value, description)
            if result:
                today_str_msg = datetime.datetime.now(TIMEZONE).strftime("%d/%m")
                return f"‚úÖ Gasto registrado em {today_str_msg}!\n- {result['description']}: *R${result['value']:.2f}* ({result['category']})\n\nSeu novo saldo √© *R${get_balance(user_id):.2f}*."

    return f"N√£o entendi, {user_name}. ü§î Se precisar de ajuda, envie `comandos`."

# --- WEBHOOK PRINCIPAL DA APLICA√á√ÉO ---
@app.route('/webhook', methods=['GET', 'POST'])
def webhook():
    if request.method == 'GET':
        mode, token, challenge = request.args.get('hub.mode'), request.args.get('hub.verify_token'), request.args.get('hub.challenge')
        if mode == 'subscribe' and token == VERIFY_TOKEN:
            print("WEBHOOK_VERIFIED"); return challenge, 200
        return 'Failed verification', 403
    
    if request.method == 'POST':
        data = request.get_json()
        try:
            message_data = data['entry'][0]['changes'][0]['value']['messages'][0]
            if message_data.get('type') != 'text': return 'EVENT_RECEIVED', 200
            user_id = message_data['from']
            user_name = data['entry'][0]['changes'][0]['value']['contacts'][0].get('profile', {}).get('name', 'Pessoa')
            message_text = message_data['text']['body'].strip().lower()
            
            print(f"Recebida mensagem de {user_name} ({user_id}): '{message_text}'")
            reply_message = process_message(user_id, user_name, message_text)
            
            if reply_message: send_whatsapp_message(user_id, reply_message)
        except Exception as e:
            print(f"!!! ERRO CR√çTICO NO WEBHOOK: {e} !!!")
            send_whatsapp_message(data['entry'][0]['changes'][0]['value']['messages'][0]['from'], "‚ùå Desculpe, encontrei um erro inesperado. Pode tentar de novo?")
        return 'EVENT_RECEIVED', 200
