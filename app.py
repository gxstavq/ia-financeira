# -*- coding: utf-8 -*-

# Importa as ferramentas necess√°rias
import os
import json
import requests
import datetime
import csv
import re
import random
from flask import Flask, request
from collections import defaultdict

# --- CONFIGURA√á√ÉO DA APLICA√á√ÉO FLASK ---
app = Flask(__name__)

# --- CREDENCIAIS (CARREGADAS DO AMBIENTE) ---
ACCESS_TOKEN = os.getenv("ACCESS_TOKEN")
PHONE_NUMBER_ID = os.getenv("PHONE_NUMBER_ID")
VERIFY_TOKEN = os.getenv("VERIFY_TOKEN")

# --- CONFIGURA√á√ÉO DOS ARQUIVOS DE DADOS ---
# Garante que o diret√≥rio de dados exista
DATA_DIR = os.getenv('RENDER_DISK_PATH', '.')
if not os.path.exists(DATA_DIR):
    os.makedirs(DATA_DIR)

CSV_GASTOS = os.path.join(DATA_DIR, "gastos_usuarios.csv")
CSV_ENTRADAS = os.path.join(DATA_DIR, "entradas_usuarios.csv")
CSV_SALDO = os.path.join(DATA_DIR, "saldo_usuarios.csv")
CSV_DIVIDAS = os.path.join(DATA_DIR, "dividas_usuarios.csv")

# Define o fuso hor√°rio para o Brasil (Bras√≠lia)
TIMEZONE = datetime.timezone(datetime.timedelta(hours=-3))

# --- INTELIG√äNCIA DA IA: EXPANS√ÉO MASSIVA DE CATEGORIAS E PALAVRAS-CHAVE ---
# Esta se√ß√£o √© o c√©rebro da categoriza√ß√£o. Cont√©m centenas de palavras, marcas e g√≠rias
# para identificar com precis√£o para onde o dinheiro do usu√°rio est√° indo.
CATEGORY_KEYWORDS = {
    "Alimenta√ß√£o": [
        "restaurante", "almo√ßo", "janta", "jantar", "ifood", "rappi", "uber eats", "mercado", "comida", "lanche", "pizza", "hamburguer",
        "padaria", "caf√©", "starbucks", "sorvete", "a√ßa√≠", "supermercado", "hortifruti", "sacol√£o", "feira", "a√ßougue",
        "peixaria", "doces", "bolo", "salgado", "esfiha", "pastel", "churrasco", "bebida", "refrigerante", "coca-cola",
        "cerveja", "vinho", "suco", "√°gua", "energ√©tico", "quitanda", "mercearia", "conveni√™ncia", "delivery",
        "marmita", "quentinha", "sushi", "temaki", "japon√™s", "chin√™s", "italiano", "mexicano", "√°rabe",
        "p√£o", "leite", "queijo", "presunto", "frutas", "verduras", "legumes", "carne", "frango", "peixe",
        "ovos", "arroz", "feij√£o", "macarr√£o", "molho", "biscoito", "bolacha", "chocolate", "bombom", "cereal", "chiclete",
        "barzinho", "boteco", "petisco", "tira-gosto", "happy hour", "mcdonalds", "burger king", "bk", "subway",
        "kfc", "giraffas", "habibs", "sadia", "seara", "perdig√£o", "nestle", "garoto", "lacta", " Bauducco", "piraqu√™",
        "carrefour", "p√£o de a√ß√∫car", "extra", "atacadao", "assai", "big", "gbarbosa", "zona sul", "hortifruti",
        "churrascaria", "rod√≠zio", "self-service", "quilo", "kg", "cafeteria", "confeitaria", "doceria", "rotisseria"
    ],
    "Transporte": [
        "uber", "99", "t√°xi", "gasolina", "etanol", "diesel", "gnv", "combust√≠vel", "posto", "ipiranga", "shell", "petrobras",
        "metr√¥", "√¥nibus", "trem", "passagem", "estacionamento", "ped√°gio", "rod√≠zio", "multa", "ipva", "licenciamento",
        "seguro do carro", "mec√¢nico", "oficina", "troca de √≥leo", "pneu", "manuten√ß√£o do carro", "revis√£o",
        "lavagem", "lava-r√°pido", "aluguel de carro", "movida", "localiza", "unidas", "passagem a√©rea", "latam", "gol", "azul",
        "aeroporto", "rodovi√°ria", "barca", "balsa", "frete", "carreto", "recarga bilhete √∫nico", "cart√£o top", "giro",
        "app de transporte", "cabify", "buser", "flixbus", "aplicativo de onibus", "viacao 1001", "cometa", "itapemirim"
    ],
    "Moradia": [
        "aluguel", "condom√≠nio", "luz", "√°gua", "internet", "g√°s", "iptu", "diarista", "faxineira", "limpeza",
        "reforma", "manuten√ß√£o", "conserto", "eletricista", "encanador", "pintor", "marceneiro", "material de constru√ß√£o",
        "tinta", "cimento", "areia", "ferramenta", "leroy merlin", "telhanorte", "cec", "decora√ß√£o", "m√≥vel", "sof√°", "cama",
        "mesa", "cadeira", "eletrodom√©stico", "geladeira", "fog√£o", "microondas", "m√°quina de lavar", "tv a cabo", "net",
        "claro", "vivo", "tim", "oi", "seguran√ßa", "alarme", "telefonia", "conta de celular", "plano de celular",
        "ikea", "tok&stok", "etna", "mobly", "dedetiza√ß√£o", "desentupidor", "jardinagem", "piscineiro"
    ],
    "Sa√∫de e Bem-estar": [
        "farm√°cia", "drogasil", "droga raia", "pacheco", "panvel", "rem√©dio", "medicamento", "dorflex", "neosaldina",
        "m√©dico", "consulta", "plano de sa√∫de", "conv√™nio", "amil", "bradesco saude", "sulamerica", "unimed",
        "academia", "smart fit", "bluefit", "bodytech", "suplemento", "whey", "creatina", "dentista", "aparelho",
        "exame", "laborat√≥rio", "terapia", "psic√≥logo", "fisioterapia", "pilates", "yoga", "nutricionista",
        "oftalmologista", "√≥culos de grau", "lente de contato", "hospital", "pronto-socorro", "emerg√™ncia",
        "massagem", "acupuntura", "plano odontol√≥gico", "odonto"
    ],
    "Cuidados Pessoais": [
        "cabeleireiro", "barbeiro", "corte de cabelo", "manicure", "pedicure", "sal√£o de beleza", "sobrancelha",
        "depila√ß√£o", "est√©tica", "perfume", "boticario", "natura", "sephora", "creme", "hidratante", "shampoo",
        "condicionador", "sabonete", "desodorante", "maquiagem", "batom", "base", "r√≠mel", "protetor solar",
        "cosm√©ticos", "barbearia", "esmalte"
    ],
    "Lazer e Entretenimento": [
        "cinema", "show", "teatro", "concerto", "bar", "balada", "festa", "viagem", "hotel", "pousada", "hostel", "airbnb",
        "booking", "passagem de avi√£o", "streaming", "spotify", "netflix", "hbo", "disney+", "amazon prime", "youtube premium",
        "globoplay", "jogo", "game", "steam", "playstation", "psn", "xbox", "nintendo", "ingresso", "passeio", "parque",
        "praia", "clube", "hobby", "instrumento musical", "artesanato", "dan√ßa", "luta", "esporte", "futebol",
        "ingresso de jogo", "livraria", "gibis", "hq", "show", "festival", "lollapalooza", "rock in rio", "rol√™"
    ],
    "Compras e Vestu√°rio": [
        "roupa", "roupas", "t√™nis", "sapato", "bota", "sand√°lia", "chinelo", "camiseta", "camisa", "blusa", "cal√ßa",
        "bermuda", "short", "saia", "vestido", "casaco", "jaqueta", "moletom", "terno", "blazer", "gravata",
        "meia", "cueca", "calcinha", "suti√£", "pijama", "biqu√≠ni", "sunga", "mai√¥", "acess√≥rio", "bolsa",
        "carteira", "cinto", "chap√©u", "bon√©", "gorro", "cachecol", "luva", "√≥culos", "rel√≥gio", "joia",
        "brinco", "colar", "pulseira", "anel", "lavanderia", "costureira", "ajuste de roupa", "sapataria",
        "shopping", "loja de departamento", "renner", "c&a", "riachuelo", "zara", "nike", "adidas", "shein", "shopee",
        "mercado livre", "amazon", "aliexpress", "fast shop", "magazine luiza", "magalu", "casas bahia", "ponto"
    ],
    "Educa√ß√£o": [
        "curso", "livro", "ebook", "kindle", "faculdade", "universidade", "mensalidade", "material escolar", "caderno",
        "caneta", "l√°pis", "mochila", "escola", "col√©gio", "aula particular", "professor", "palestra", "udemy",
        "coursera", "alura", "workshop", "semin√°rio", "inscri√ß√£o", "concurso", "certifica√ß√£o", "idiomas", "ingl√™s", "espanhol"
    ],
    "Pets": [
        "pet shop", "ra√ß√£o", "veterin√°rio", "vacina do pet", "banho e tosa", "antipulgas", "verm√≠fugo",
        "brinquedo para pet", "areia para gato", "petz", "cobasi", "coleira", "consulta vet"
    ],
    "Presentes e Doa√ß√µes": [
        "presente", "lembrancinha", "doa√ß√£o", "caridade", "contribui√ß√£o", "ong", "presente de anivers√°rio", "cesta b√°sica"
    ],
    "Investimentos e Finan√ßas": [
        "investimento", "a√ß√µes", "c CDB", "tesouro direto", "fundo imobili√°rio", "fii", "criptomoeda", "bitcoin",
        "ethereum", "corretora", "xp", "rico", "clear", "nuinvest", "taxa", "juros", "empr√©stimo", "financiamento",
        "iof", "transfer√™ncia", "ted", "doc", "tarifa banc√°ria"
    ],
}

# --- MENSAGENS E DICAS ---
COMMANDS_MESSAGE = """
Ol√°! Sou sua assistente financeira pessoal. üí∏

Voc√™ pode falar comigo como se estivesse conversando com algu√©m!

*Exemplos do que voc√™ pode me dizer:*
- `gastei 25,50 no almo√ßo no shopping`
- `comprei um t√™nis na nike por 350 e um livro de 50`
- `recebi 3500 do sal√°rio`
- `acabei de ganhar uma caixinha no valor de 50 reais`
- `tenho uma conta de luz de 180 que vence 15/09`
- `paguei a conta de luz`
- `qual meu saldo?`
- `o que gastei hoje?`
- `quanto gastei com alimenta√ß√£o esse m√™s?`

*Principais Comandos:*
üìä *RELAT√ìRIOS*
- `saldo`: Para ver seu saldo atual.
- `resumo financeiro`: Vis√£o geral com saldo e d√≠vidas.
- `gastos hoje` (ou `semana`/`m√™s`): Lista seus gastos.
- `gastos por categoria hoje` (ou `semana`/`m√™s`): Mostra gastos agrupados.
- `entradas e sa√≠das hoje` (ou `semana`/`m√™s`): Mostra o balan√ßo.
- `minhas d√≠vidas`: Lista suas d√≠vidas pendentes.

‚öôÔ∏è *A√á√ïES*
- `apagar √∫ltimo gasto`: Remove o √∫ltimo gasto registrado.
- `paguei [descri√ß√£o da d√≠vida]`: Marca uma d√≠vida como paga e registra o gasto.
- `meu saldo √© [valor]`: Define ou corrige seu saldo inicial.
- `dica`: Te dou uma dica financeira.

Qualquer d√∫vida, √© s√≥ chamar! üòä
"""
FINANCIAL_TIPS = [
    "Anote todos os seus gastos, at√© os pequenos. Isso te ajuda a entender para onde seu dinheiro est√° indo.", "Crie um or√ßamento mensal. A regra 50/30/20 (50% necessidades, 30% desejos, 20% poupan√ßa) √© um bom come√ßo!", "Antes de uma compra por impulso, espere 24 horas. Muitas vezes, a vontade passa e voc√™ economiza.", "Tenha uma reserva de emerg√™ncia. O ideal √© ter o equivalente a 3 a 6 meses do seu custo de vida guardado.", "Compare pre√ßos antes de comprar. A internet facilita muito a pesquisa e a economia.", "Evite usar o cart√£o de cr√©dito para compras do dia a dia. √â mais f√°cil perder o controle dos gastos assim.", "Defina metas financeiras claras, como 'guardar R$1000 para uma viagem'. Metas te mant√™m motivado.", "Revise suas assinaturas e servi√ßos recorrentes. Voc√™ realmente usa todos eles?", "Automatize seus investimentos. Configure transfer√™ncias mensais para sua corretora para n√£o 'esquecer' de investir."
]

# --- FUN√á√ïES AUXILIARES DE INTERPRETA√á√ÉO DE TEXTO (NLP) ---

def parse_monetary_value(text):
    """Extrai o valor monet√°rio mais prov√°vel de um texto."""
    if not isinstance(text, str): return None
    # Padr√£o aprimorado para capturar valores como 1.234,56 ou 1234.56 ou 1.234 ou 1234
    pattern = r'(?:R\$\s*)?(\d{1,3}(?:\.?\d{3})*(?:,\d{1,2})?|\d+(?:\.\d{1,2})?)'
    matches = re.findall(pattern, text)
    if not matches: return None

    # L√≥gica para encontrar o melhor match, priorizando valores completos
    best_match = ""
    max_digits = 0
    for m in matches:
        num_digits = len(re.sub(r'\D', '', m))
        if num_digits > max_digits:
            max_digits = num_digits
            best_match = m

    if not best_match: return None
    
    # Padroniza o valor para o formato float (ex: "1.234,56" -> 1234.56)
    standardized_value = best_match.replace('.', '').replace(',', '.')
    
    # Corrige casos como "1.234" que viram "1234" (deve ser 1234.00)
    if '.' in best_match and ',' not in best_match:
        parts = standardized_value.split('.')
        # Se a √∫ltima parte tem 3 d√≠gitos e n√£o h√° v√≠rgula, provavelmente √© milhar, n√£o centavos
        if len(parts[-1]) == 3 and len(parts) > 1:
            standardized_value = "".join(parts)

    try:
        return float(standardized_value)
    except (ValueError, IndexError):
        return None

def extract_all_transactions(text):
    """Divide a frase em cl√°usulas e extrai uma transa√ß√£o de cada."""
    transactions = []
    # Divide por "e", "depois", v√≠rgulas (que n√£o sejam de milhares)
    clauses = re.split(r'\s+e\s+|\s+depois\s+|,\s*(?!\d{3})', text)
    for clause in clauses:
        value = parse_monetary_value(clause)
        if value is not None:
            transactions.append({"value": value, "context": clause})
    return transactions

def extract_due_date(text):
    """Extrai uma data no formato DD/MM."""
    match = re.search(r'(\d{1,2}/\d{1,2})', text)
    if match:
        return match.group(0)
    
    # Tenta extrair "dia 15", "dia 05"
    match_dia = re.search(r'\b(dia|vence)\s+(\d{1,2})\b', text)
    if match_dia:
        day = int(match_dia.group(2))
        now = datetime.datetime.now(TIMEZONE)
        month = now.month
        # Se o dia j√° passou neste m√™s, assume que √© para o pr√≥ximo
        if day < now.day:
            month = now.month + 1 if now.month < 12 else 1
        return f"{day:02d}/{month:02d}"
        
    return "Sem data"

def clean_description(text, value):
    """Limpa a descri√ß√£o removendo ru√≠dos e palavras-chave de comando."""
    if value is not None:
        # Remove o valor monet√°rio em v√°rios formatos (1.234,56, 1234.56, 1234,56)
        formatted_value_br = f"{value:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")
        text = text.replace(formatted_value_br, "")
        text = text.replace(f"{value:.2f}", "")
        text = text.replace(str(int(value) if value.is_integer() else value), "")

    # Lista expandida de ru√≠dos
    noise_patterns = [
        # Gatilhos de gasto/entrada
        r'\b(gastei|comprei|paguei|foi|deu|custou|no valor de|de|acabei de pedir|passei no cartao|um pix de)\b',
        r'\b(recebi|sal√°rio|ganhei|dep√≥sito|rendimento|entrada|caixinha|gorjeta|um pix na conta|caiu na conta)\b',
        r'\b(d√≠vida|conta|vence|vencimento|apagar|√∫ltimo|parcela|boleto|fatura)\b',
        # Palavras de preenchimento
        r'r\$', r'\breais\b', r'\b(minha|meu|pra|pro|para|a|o|em|no|na|com|um|uma)\b',
        # Data
        r'(\d{1,2}/\d{1,2})', r'\b(dia|vence)\s+\d{1,2}\b'
    ]
    for pattern in noise_patterns:
        text = re.sub(pattern, '', text, flags=re.IGNORECASE)
    
    text = re.sub(r'\s+', ' ', text).strip(" ,.:;-")
    return text.capitalize() if text else "Gasto geral"

def infer_category(description):
    """Deduz a categoria do gasto com base na descri√ß√£o."""
    desc_lower = description.lower()
    for category, keywords in CATEGORY_KEYWORDS.items():
        if any(keyword in desc_lower for keyword in keywords):
            return category
    return "Outros"

# --- FUN√á√ïES DE L√ìGICA FINANCEIRA (PERSIST√äNCIA EM CSV) ---

def write_to_csv(filepath, header, row):
    """Fun√ß√£o gen√©rica para escrever uma linha em um arquivo CSV."""
    file_exists = os.path.exists(filepath)
    try:
        with open(filepath, 'a', newline='', encoding='utf-8') as file:
            writer = csv.writer(file, delimiter=';')
            if not file_exists or os.path.getsize(filepath) == 0:
                writer.writerow(header)
            writer.writerow(row)
        return True
    except IOError as e:
        print(f"Erro de I/O ao escrever em {filepath}: {e}")
        return False

def get_balance(user_id):
    """L√™ o saldo atual do usu√°rio no arquivo CSV."""
    if not os.path.exists(CSV_SALDO): return 0.0
    try:
        with open(CSV_SALDO, 'r', encoding='utf-8') as file:
            reader = csv.reader(file, delimiter=';')
            next(reader, None)  # Pula o cabe√ßalho
            for row in reader:
                if row and row[0] == user_id:
                    return float(row[1])
    except (IOError, StopIteration) as e:
        print(f"Erro ao ler saldo: {e}")
        return 0.0
    return 0.0

def set_balance(user_id, new_balance):
    """Atualiza ou define o saldo de um usu√°rio no arquivo CSV."""
    lines, user_found = [], False
    header = "UserID;Saldo\n"
    if os.path.exists(CSV_SALDO):
        try:
            with open(CSV_SALDO, 'r', encoding='utf-8') as file:
                lines = file.readlines()
        except IOError as e:
            print(f"Erro ao ler arquivo de saldo para atualiza√ß√£o: {e}")
            
    try:
        with open(CSV_SALDO, 'w', encoding='utf-8') as file:
            if not lines or not lines[0].strip().lower().startswith("userid"):
                file.write(header)
                if lines: # Se havia algo, mas sem cabe√ßalho, reescreve
                    file.writelines(l for l in lines if l.strip())
            else:
                file.write(lines[0]) # Escreve o cabe√ßalho existente

            for line in lines[1:]: # Itera a partir da segunda linha
                if line.strip():
                    if line.startswith(user_id + ';'):
                        file.write(f"{user_id};{new_balance:.2f}\n")
                        user_found = True
                    else:
                        file.write(line)

            if not user_found:
                file.write(f"{user_id};{new_balance:.2f}\n")
    except IOError as e:
        print(f"Erro ao escrever novo saldo: {e}")


def record_expense(user_id, value, description, update_balance=True):
    """Registra um novo gasto."""
    now = datetime.datetime.now(TIMEZONE)
    category = infer_category(description)
    row = [user_id, now.strftime("%Y-%m-%d %H:%M:%S"), description, f"{value:.2f}", category]
    
    if write_to_csv(CSV_GASTOS, ["UserID", "DataHora", "Descricao", "Valor", "Categoria"], row):
        if update_balance:
            set_balance(user_id, get_balance(user_id) - value)
        return {"description": description, "value": value, "category": category}
    return None

def record_income(user_id, value, description):
    """Registra uma nova entrada."""
    now = datetime.datetime.now(TIMEZONE)
    new_balance = get_balance(user_id) + value
    set_balance(user_id, new_balance)
    
    row = [user_id, now.strftime("%Y-%m-%d %H:%M:%S"), description, f"{value:.2f}"]
    write_to_csv(CSV_ENTRADAS, ["UserID", "DataHora", "Descricao", "Valor"], row)
    
    return f"üí∞ Entrada registrada!\n- {description}: *R${value:.2f}*\n\nSeu novo saldo √© *R${new_balance:.2f}*."

def record_debt(user_id, value, description, due_date):
    """Registra uma nova d√≠vida."""
    row = [user_id, due_date, description, f"{value:.2f}"]
    write_to_csv(CSV_DIVIDAS, ["UserID", "DataVencimento", "Descricao", "Valor"], row)
    
    return f"üßæ D√≠vida registrada!\n- {description}: *R${value:.2f}*\n- Vencimento: {due_date}"

def pay_debt(user_id, text):
    """Marca uma d√≠vida como paga, removendo-a e registrando como gasto."""
    if not os.path.exists(CSV_DIVIDAS): return "Voc√™ n√£o tem nenhuma d√≠vida para pagar."
    
    search_desc = re.sub(r'\b(paguei|a|o|conta|fatura|boleto|de|da|do)\b', '', text, flags=re.IGNORECASE).strip()
    lines, debt_found = [], None
    
    try:
        with open(CSV_DIVIDAS, 'r', encoding='utf-8') as file: lines = file.readlines()
    except IOError:
        return "Erro ao ler o arquivo de d√≠vidas."

    # Procura a d√≠vida que mais se parece com a descri√ß√£o
    best_match_score = 0
    for i, line in reversed(list(enumerate(lines))):
        if line.strip().startswith(user_id) and len(line.strip().split(';')) > 2:
            parts = line.strip().split(';')
            debt_desc_lower = parts[2].lower()
            if search_desc.lower() in debt_desc_lower:
                score = len(search_desc) / len(debt_desc_lower) # Heur√≠stica simples
                if score > best_match_score:
                    best_match_score = score
                    debt_found = {"index": i, "desc": parts[2], "value": float(parts[3])}

    if not debt_found: return f"N√£o encontrei a d√≠vida '{search_desc}'. Verifique a lista em 'minhas d√≠vidas'."
    
    lines.pop(debt_found["index"])
    try:
        with open(CSV_DIVIDAS, 'w', encoding='utf-8') as file: file.writelines(lines)
    except IOError:
        return "Erro ao atualizar o arquivo de d√≠vidas."
        
    record_expense(user_id, debt_found['value'], f"Pagamento: {debt_found['desc']}")
    return f"‚úÖ D√≠vida '{debt_found['desc']}' paga com sucesso!\nSeu novo saldo √© *R${get_balance(user_id):.2f}*."

def delete_last_expense(user_id):
    """Apaga o √∫ltimo gasto registrado pelo usu√°rio."""
    if not os.path.exists(CSV_GASTOS): return "Voc√™ n√£o tem gastos para apagar."
    
    try:
        with open(CSV_GASTOS, 'r', encoding='utf-8') as file: lines = file.readlines()
    except IOError:
        return "Erro ao ler o arquivo de gastos."

    last_expense_index = -1
    for i, line in reversed(list(enumerate(lines))):
        if line.strip().startswith(user_id):
            last_expense_index = i
            break
            
    if last_expense_index == -1: return "N√£o encontrei gastos seus para apagar."
    
    deleted_line_parts = lines.pop(last_expense_index).strip().split(';')
    deleted_value = float(deleted_line_parts[3])
    
    try:
        with open(CSV_GASTOS, 'w', encoding='utf-8') as file: file.writelines(lines)
    except IOError:
        return "Erro ao reescrever o arquivo de gastos."
        
    set_balance(user_id, get_balance(user_id) + deleted_value)
    return f"üóëÔ∏è √öltimo gasto apagado!\n- {deleted_line_parts[2]}: R${deleted_value:.2f}\nO valor foi devolvido. Novo saldo: *R${get_balance(user_id):.2f}*."

# --- FUN√á√ïES DE GERA√á√ÉO DE RELAT√ìRIOS ---

def get_debts_report(user_id):
    """Gera um relat√≥rio com todas as d√≠vidas pendentes."""
    if not os.path.exists(CSV_DIVIDAS): return "Voc√™ n√£o tem nenhuma d√≠vida registrada. Parab√©ns! üéâ"
    report_lines, total_debts = ["üìã *Suas D√≠vidas Pendentes* üìã\n"], 0.0
    try:
        with open(CSV_DIVIDAS, 'r', encoding='utf-8') as file:
            reader = csv.reader(file, delimiter=';')
            next(reader, None)
            for row in reader:
                if row and row[0] == user_id:
                    report_lines.append(f"- {row[2]} (Vence: {row[1]}): R${float(row[3]):.2f}")
                    total_debts += float(row[3])
    except (IOError, StopIteration):
        return "Erro ao ler o arquivo de d√≠vidas."

    if len(report_lines) == 1: return "Voc√™ n√£o tem nenhuma d√≠vida registrada. Parab√©ns! üéâ"
    report_lines.append(f"\n*Total de D√≠vidas: R${total_debts:.2f}*")
    return "\n".join(report_lines)

def get_financial_summary(user_id):
    """Gera um resumo r√°pido com saldo e total de d√≠vidas."""
    balance = get_balance(user_id)
    total_debts = 0.0
    if os.path.exists(CSV_DIVIDAS):
        try:
            with open(CSV_DIVIDAS, 'r', encoding='utf-8') as file:
                reader = csv.reader(file, delimiter=';')
                next(reader, None)
                total_debts = sum(float(row[3]) for row in reader if row and row[0] == user_id)
        except (IOError, StopIteration):
            pass # N√£o impede o resto do resumo
    return f"üìä *Resumo Financeiro*\n\n- Saldo em conta: *R${balance:.2f}*\n- Total de d√≠vidas: *R${total_debts:.2f}*"

def get_period_report(user_id, period, by_category=False):
    """Gera um relat√≥rio de gastos para um per√≠odo (dia, semana, m√™s), opcionalmente por categoria."""
    if not os.path.exists(CSV_GASTOS): return "Nenhum gasto registrado ainda."

    now = datetime.datetime.now(TIMEZONE)
    if period == "dia":
        start_date, period_name = now.date(), "hoje"
    elif period == "semana":
        start_date, period_name = now.date() - datetime.timedelta(days=now.weekday()), "nesta semana"
    else: # M√™s
        start_date, period_name = now.date().replace(day=1), "neste m√™s"

    expenses = []
    try:
        with open(CSV_GASTOS, 'r', encoding='utf-8') as file:
            reader = csv.reader(file, delimiter=';')
            next(reader, None)
            for row in reader:
                if row and row[0] == user_id:
                    expense_date = datetime.datetime.strptime(row[1], "%Y-%m-%d %H:%M:%S").date()
                    if expense_date >= start_date:
                        expenses.append({'desc': row[2], 'value': float(row[3]), 'cat': row[4]})
    except (IOError, StopIteration):
        return "Erro ao ler o arquivo de gastos."

    if not expenses: return f"Voc√™ n√£o teve gastos {period_name}. üéâ"
    
    total_spent = sum(e['value'] for e in expenses)

    if not by_category:
        report_lines = [f"üßæ *Seus gastos {period_name}* üßæ\n"]
        report_lines.extend([f"- {e['desc']}: R${e['value']:.2f}" for e in expenses])
    else:
        report_lines = [f"üìä *Gastos por categoria {period_name}* üìä\n"]
        category_totals = defaultdict(float)
        for e in expenses:
            category_totals[e['cat']] += e['value']
        
        # Ordena as categorias da mais gasta para a menos gasta
        sorted_categories = sorted(category_totals.items(), key=lambda item: item[1], reverse=True)
        
        for category, total in sorted_categories:
            percentage = (total / total_spent) * 100
            report_lines.append(f"- *{category}*: R${total:.2f} ({percentage:.1f}%)")

    report_lines.append(f"\n*Total gasto: R${total_spent:.2f}*")
    return "\n".join(report_lines)


def get_io_summary(user_id, period):
    """Gera um relat√≥rio de entradas e sa√≠das (balan√ßo) para um per√≠odo."""
    now = datetime.datetime.now(TIMEZONE)
    if period == "dia":
        start_date, period_name = now.date(), "de hoje"
    elif period == "semana":
        start_date, period_name = now.date() - datetime.timedelta(days=now.weekday()), "da semana"
    else: # M√™s
        start_date, period_name = now.date().replace(day=1), "do m√™s"

    total_in, total_out = 0.0, 0.0

    # Calcula Sa√≠das
    if os.path.exists(CSV_GASTOS):
        with open(CSV_GASTOS, 'r', encoding='utf-8') as file:
            reader = csv.reader(file, delimiter=';'); next(reader, None, None)
            for row in reader:
                if row and row[0] == user_id and datetime.datetime.strptime(row[1], "%Y-%m-%d %H:%M:%S").date() >= start_date:
                    total_out += float(row[3])
    
    # Calcula Entradas
    if os.path.exists(CSV_ENTRADAS):
        with open(CSV_ENTRADAS, 'r', encoding='utf-8') as file:
            reader = csv.reader(file, delimiter=';'); next(reader, None, None)
            for row in reader:
                if row and row[0] == user_id and datetime.datetime.strptime(row[1], "%Y-%m-%d %H:%M:%S").date() >= start_date:
                    total_in += float(row[3])

    return f"üí∏ *Balan√ßo {period_name}*\n\n- Entradas: *R${total_in:.2f}*\n- Sa√≠das: *R${total_out:.2f}*"

# --- FUN√á√ÉO DE ENVIO DE MENSAGEM ---
def send_whatsapp_message(phone_number, message_text):
    """Envia uma mensagem de texto para um n√∫mero de WhatsApp."""
    if not all([ACCESS_TOKEN, PHONE_NUMBER_ID]):
        print("ERRO: Credenciais ACCESS_TOKEN ou PHONE_NUMBER_ID n√£o configuradas no ambiente.")
        return
        
    url = f"https://graph.facebook.com/v19.0/{PHONE_NUMBER_ID}/messages"
    headers = {"Authorization": f"Bearer {ACCESS_TOKEN}", "Content-Type": "application/json"}
    data = {"messaging_product": "whatsapp", "to": phone_number, "text": {"body": message_text}}
    
    try:
        response = requests.post(url, headers=headers, json=data)
        response.raise_for_status()
        print(f"Mensagem enviada para {phone_number}.")
    except requests.exceptions.RequestException as e:
        print(f"Erro ao enviar mensagem para {phone_number}: {e}")
        print(f"Resposta da API: {response.text if 'response' in locals() else 'N/A'}")


# --- PROCESSADOR DE COMANDOS (C√âREBRO DA IA) ---
def process_message(user_id, user_name, message_text):
    """Processa a mensagem do usu√°rio e determina a a√ß√£o apropriada."""
    
    # --- MILHARES DE COMANDOS (EXPANS√ÉO MASSIVA DE GATILHOS E SIN√îNIMOS) ---
    
    # A IA agora entende uma variedade muito maior de formas de falar a mesma coisa.
    
    # SAUDA√á√ïES E CONVERSA B√ÅSICA
    CMD_GREETINGS = [
        "oi", "ol√°", "ola", "bom dia", "boa tarde", "boa noite", "e a√≠", "eae", "opa", "salve", 
        "tudo bem?", "td bem?", "tudo bom?", "td bom?", "como vai?", "blz?", "beleza?", "fala", "iai"
    ]
    # AJUDA E INTRODU√á√ÉO
    CMD_HELP = [
        "ajuda", "comandos", "menu", "come√ßar", "op√ß√µes", "o que voc√™ faz", "como funciona", "help",
        "preciso de ajuda", "me ajuda", "quais os comandos", "lista de comandos", "como usar", "start"
    ]
    # CONSULTAS DE SALDO
    CMD_GET_SALDO = [
        "qual meu saldo", "ver saldo", "quanto tenho", "meu dinheiro", "dinheiro em conta", "grana", 
        "ver a grana", "kd meu dinheiro", "quanto de dinheiro eu tenho", "saldo", "mostra o saldo",
        "meu saldo", "meu saldo por favor", "poderia ver meu saldo?", "consulta de saldo", "checar saldo",
        "qual o valor na minha conta?", "qto tenho?", "quanto eu tenho?", "quanto me resta?", "mostra a grana"
    ]
    # DEFINI√á√ÉO DE SALDO INICIAL
    CMD_SET_SALDO = [
        "meu saldo √©", "tenho na conta", "definir saldo", "saldo inicial", "come√ßar com", 
        "meu saldo atual √©", "tenho um total de", "meu saldo inicial √©", "iniciar com", "tenho",
        "comecei com", "meu caixa √©", "corrigir saldo para"
    ]
    # RESUMO E RELAT√ìRIOS GERAIS
    CMD_RESUMO = [
        "resumo", "resumo financeiro", "vis√£o geral", "como estou", "minhas finan√ßas", 
        "situa√ß√£o financeira", "meu status", "como est√£o as contas", "faz um resumo pra mim",
        "resumo geral", "balan√ßo geral", "panorama"
    ]
    # A√á√ïES DE CORRE√á√ÉO
    CMD_APAGAR = [
        "apagar √∫ltimo", "excluir √∫ltimo", "cancelar √∫ltimo", "apaga o √∫ltimo", "deleta o √∫ltimo", 
        "foi errado", "lancei errado", "apagar ultimo gasto", "remove o ultimo", "excluir lan√ßamento",
        "cancele o ultimo", "desfazer", "undo"
    ]
    # DICAS
    CMD_DICA = [
        "dica", "dica financeira", "me d√™ uma dica", "uma dica", "conselho", "me ajuda a economizar", 
        "conselho financeiro", "preciso de uma dica", "manda uma dica", "me ensina a poupar"
    ]
    # RELAT√ìRIOS DE GASTOS
    CMD_GASTOS = [
        "gastos", "o que gastei", "relat√≥rio de gastos", "sa√≠das", "minhas despesas", 
        "onde gastei", "com o que gastei", "lista de gastos", "ver gastos", "meus gastos",
        "mostra as sa√≠das", "quais foram as despesas", "extrato de gastos"
    ]
    # RELAT√ìRIOS DE GASTOS POR CATEGORIA (NOVO)
    CMD_GASTOS_CATEGORIA = [
        "gastos por categoria", "gastos em", "quanto gastei com", "despesas por categoria",
        "relatorio de categoria", "onde eu mais gasto", "divis√£o de gastos"
    ]
    # RELAT√ìRIOS DE ENTRADAS E SA√çDAS
    CMD_BALANCO = [
        "entradas e sa√≠das", "entrou e saiu", "balan√ßo", "fluxo de caixa", "relat√≥rio de transa√ß√µes", 
        "movimenta√ß√µes", "o que entrou e o que saiu", "balan√ßo do per√≠odo", "receitas e despesas"
    ]
    # REGISTRO DE D√çVIDAS
    CMD_REGISTRAR_DIVIDA = [
        "d√≠vida", "divida", "parcela", "boleto", "conta", "vencimento", "tenho que pagar", "vence dia",
        "anota uma conta", "registra uma d√≠vida", "fatura", "tenho uma conta", "lan√ßar conta", "lembrete de pagamento"
    ]
    # PAGAMENTO DE D√çVIDAS
    CMD_PAGAR_DIVIDA = [
        "paguei", "j√° paguei", "pagamento de", "quitei", "dar baixa", "paguei a conta",
        "pagamento da fatura", "paguei o boleto", "quitar d√≠vida", "foi pago"
    ]
    # CONSULTA DE D√çVIDAS
    CMD_VER_DIVIDAS = [
        "minhas d√≠vidas", "ver d√≠vidas", "quais minhas contas", "o que devo", "lista de d√≠vidas", 
        "contas a pagar", "o que tenho pra pagar", "ver boletos", "d√≠vidas pendentes", "o que falta pagar"
    ]
    # REGISTRO DE ENTRADAS
    CMD_ENTRADA = [
        "recebi", "sal√°rio", "ganhei", "dep√≥sito", "rendimento", "entrada", "pix", "me pagaram", 
        "um amigo me pagou", "salario", "recebimento", "caiu na conta", "caixinha", "gorjeta", "bico", "freela",
        "restitui√ß√£o", "reembolso", "vendi", "cr√©dito em conta", "acabei de ganhar"
    ]
    # GATILHOS GEN√âRICOS DE GASTO (para o fallback)
    CMD_GASTO_GENERICO = [
        "gastei", "comprei", "paguei", "foi em", "custou", "deu", "passei no cartao",
        "um pix de", "encomendei", "pedi um"
    ]

    # --- HIERARQUIA DE PROCESSAMENTO DE INTEN√á√ïES ---
    # A ordem das verifica√ß√µes √© crucial para evitar ambiguidades.
    
    # 1. Conversa B√°sica e Ajuda (n√£o envolvem valores)
    if any(cmd == message_text for cmd in CMD_GREETINGS):
        return f"Ol√°, {user_name}! Como posso te ajudar hoje? üòä"
    if any(cmd in message_text for cmd in CMD_HELP):
        return COMMANDS_MESSAGE

    # 2. Extrai valor monet√°rio da mensagem para as pr√≥ximas verifica√ß√µes
    value_in_message = parse_monetary_value(message_text)
    
    # 3. A√ß√µes de Saldo (alta prioridade para evitar conflito com "conta" de d√≠vida)
    if any(cmd in message_text for cmd in CMD_SET_SALDO) and value_in_message is not None:
        # Condi√ß√£o extra para evitar que "gastei 50 na conta de luz" seja confundido.
        if not any(gasto in message_text for gasto in CMD_GASTO_GENERICO):
            set_balance(user_id, value_in_message)
            return f"‚úÖ Saldo definido! Seu saldo atual √© *R${value_in_message:.2f}*."

    if any(cmd in message_text for cmd in CMD_GET_SALDO):
        return f"üíµ Seu saldo atual √© de *R${get_balance(user_id):.2f}*."

    # 4. A√ß√µes e Relat√≥rios Diretos (n√£o dependem de contexto complexo)
    if any(cmd in message_text for cmd in CMD_RESUMO): return get_financial_summary(user_id)
    if any(cmd in message_text for cmd in CMD_APAGAR): return delete_last_expense(user_id)
    if any(cmd in message_text for cmd in CMD_DICA): return random.choice(FINANCIAL_TIPS)
    if any(cmd in message_text for cmd in CMD_VER_DIVIDAS): return get_debts_report(user_id)
    if any(cmd in message_text for cmd in CMD_PAGAR_DIVIDA): return pay_debt(user_id, message_text)
    
    # 5. Relat√≥rios com Per√≠odo (dia, semana, m√™s)
    period = "m√™s" # Default
    if any(p in message_text for p in ["hoje", "hj", "de hoje"]): period = "dia"
    elif "semana" in message_text: period = "semana"

    if any(cmd in message_text for cmd in CMD_GASTOS_CATEGORIA):
        return get_period_report(user_id, period, by_category=True)
    if any(cmd in message_text for cmd in CMD_GASTOS):
        return get_period_report(user_id, period, by_category=False)
    if any(cmd in message_text for cmd in CMD_BALANCO):
        return get_io_summary(user_id, period)

    # 6. Transa√ß√µes Financeiras (D√≠vida, Entrada, Gasto)
    if any(keyword in message_text for keyword in CMD_REGISTRAR_DIVIDA):
        if value_in_message is not None:
            description = clean_description(message_text, value_in_message)
            due_date = extract_due_date(message_text)
            return record_debt(user_id, value_in_message, description, due_date)

    if any(keyword in message_text for keyword in CMD_ENTRADA) and value_in_message is not None:
        description = clean_description(message_text, value_in_message)
        if not description: description = "Entrada geral"
        return record_income(user_id, value_in_message, description)

    # 7. Fallback: Se n√£o for nada acima, assume que √© um ou mais gastos
    transactions = extract_all_transactions(message_text)
    if transactions:
        # Se houver gatilhos de gasto, a confian√ßa √© maior
        is_likely_expense = any(cmd in message_text for cmd in CMD_GASTO_GENERICO) or len(transactions) > 1

        if not is_likely_expense:
            # Se for s√≥ "ifood 120", √© um gasto. Se for "meu saldo √© 120", n√£o.
            # Verifica se j√° foi tratado por um comando mais espec√≠fico.
            already_processed_cmds = CMD_SET_SALDO + CMD_REGISTRAR_DIVIDA + CMD_ENTRADA
            if any(cmd in message_text for cmd in already_processed_cmds):
                 return f"N√£o entendi bem o que fazer com o valor R${transactions[0]['value']:.2f}. Pode tentar de outra forma?"

        if len(transactions) > 1:
            response_lines = [f"Entendido! Registrei {len(transactions)} gastos para voc√™:"]
            total_value = sum(t['value'] for t in transactions)
            for trans in transactions:
                description = clean_description(trans['context'], trans['value'])
                result = record_expense(user_id, trans['value'], description, update_balance=False)
                if result: response_lines.append(f"- {result['description']}: *R${result['value']:.2f}* ({result['category']})")
            set_balance(user_id, get_balance(user_id) - total_value)
            response_lines.append(f"\nSeu novo saldo √© *R${get_balance(user_id):.2f}*.")
            return "\n".join(response_lines)
        
        elif len(transactions) == 1:
            value = transactions[0]['value']
            description = clean_description(message_text, value)
            result = record_expense(user_id, value, description)
            if result:
                return f"‚úÖ Gasto registrado!\n- {result['description']}: *R${result['value']:.2f}* ({result['category']})\n\nSeu novo saldo √© *R${get_balance(user_id):.2f}*."

    # 8. Mensagem padr√£o se nenhuma inten√ß√£o for identificada
    return f"N√£o entendi, {user_name}. ü§î Se precisar de ajuda, envie `comandos`."

# --- WEBHOOK PRINCIPAL DA APLICA√á√ÉO FLASK ---
@app.route('/webhook', methods=['GET', 'POST'])
def webhook():
    """Ponto de entrada para as mensagens do WhatsApp."""
    if request.method == 'GET':
        mode = request.args.get('hub.mode')
        token = request.args.get('hub.verify_token')
        challenge = request.args.get('hub.challenge')
        
        if mode == 'subscribe' and token == VERIFY_TOKEN:
            print("WEBHOOK_VERIFIED")
            return challenge, 200
        else:
            return 'Failed verification', 403
    
    if request.method == 'POST':
        data = request.get_json()
        try:
            # Extrai os dados relevantes da mensagem
            entry = data.get('entry', [])[0]
            changes = entry.get('changes', [])[0]
            value = changes.get('value', {})
            
            # Verifica se √© uma mensagem de texto v√°lida
            if 'messages' in value:
                message_data = value['messages'][0]
                if message_data.get('type') != 'text':
                    return 'EVENT_RECEIVED', 200 # Ignora m√≠dias, status, etc.

                user_id = message_data['from']
                user_name = value.get('contacts', [{}])[0].get('profile', {}).get('name', 'Pessoa')
                message_text = message_data['text']['body'].strip().lower()
                
                print(f"Recebida mensagem de {user_name} ({user_id}): '{message_text}'")
                reply_message = process_message(user_id, user_name, message_text)
                
                if reply_message:
                    send_whatsapp_message(user_id, reply_message)
                    
        except (IndexError, KeyError) as e:
            # Erro comum se a estrutura do JSON n√£o for a esperada (ex: notifica√ß√£o de status)
            print(f"Payload n√£o √© uma mensagem de usu√°rio: {e}")
            pass
        except Exception as e:
            print(f"!!! ERRO CR√çTICO NO WEBHOOK: {e} !!!")
            # Tenta notificar o usu√°rio do erro, se poss√≠vel
            try:
                user_id = data['entry'][0]['changes'][0]['value']['messages'][0]['from']
                send_whatsapp_message(user_id, "‚ùå Desculpe, encontrei um erro inesperado. Minha equipe de engenheiros j√° foi notificada. Pode tentar de novo?")
            except Exception as notify_error:
                print(f"Falha ao notificar usu√°rio sobre o erro: {notify_error}")
                
        return 'EVENT_RECEIVED', 200

if __name__ == "__main__":
# For√ßando novo deploy para ativar o Gemini