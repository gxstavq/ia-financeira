import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
import pickle

data = []

# -- Gerador autom√°tico de frases para turbinar as inten√ß√µes --

# Greetings
greetings_frases = [
    "oi", "ol√°", "ola", "opa", "e a√≠", "eae", "yo", "fala ai", "fala", "salve", "al√¥", "alow", "hey", "hi", "hello", "bom dia", "boa tarde", "boa noite", "menu", "comandos", "funcoes", "me ajuda", "ajuda", "ajuda por favor", "socorro", "preciso de ajuda", "me salva", "tudo bem", "tudo certo", "como vai", "tranquilo", "beleza", "blz", "suave", "sup", "fala comigo", "start", "iniciar", "inicio", "vamos la", "come√ßar", "ajudaaa", "ajudaaa!", "me socorre", "algu√©m a√≠?", "tem algu√©m a√≠?", "tem alguem", "est√° ai?", "vc est√° ai?", "vc ta ai?", "voc√™ est√° ai?", "voc√™ ta ai?", "ol√° bot", "ei bot", "oi bot", "fala bot", "ol√° ia", "assistente financeira", "e a√≠, beleza?", "fala zap", "fala chat", "oi zap", "opa assistente", "al√¥ bot", "alow bot", "fala zapbot", "ol√° zapbot", "yo bot", "fala ai bot", "tudo bem bot", "tudo certo bot", "beleza bot", "blz bot", "suave bot", "fala zap", "fala ia", "oi assistente", "ol√° assistente", "bom dia bot", "boa tarde bot", "boa noite bot"
]
# Multiplica por varia√ß√µes
for frase in greetings_frases:
    data.append((frase, "greetings"))
    data.append((frase + " tudo bem?", "greetings"))
    data.append(("oi " + frase, "greetings"))
    data.append((frase + " üëã", "greetings"))
    data.append((frase + " üòÉ", "greetings"))
    data.append(("üëã " + frase, "greetings"))
    data.append(("fala " + frase, "greetings"))
    data.append(("menu " + frase, "greetings"))
    data.append(("comandos " + frase, "greetings"))

# Dividas
dividas_frases = [
    "minhas d√≠vidas", "minhas dividas", "ver d√≠vidas", "ver dividas", "quais as minhas d√≠vidas", "quais as minhas dividas", "tenho d√≠vidas?", "tenho dividas?", "contas a pagar", "contas pra pagar", "contas pendentes", "contas atrasadas", "me mostra as d√≠vidas", "me mostra as dividas", "d√≠vidas atuais", "dividas atuais", "quais contas est√£o abertas?", "quais contas t√£o abertas?", "meus d√©bitos", "meus debitos", "d√©bitos", "debitos", "lista de d√≠vidas", "lista de dividas", "d√≠vida atrasada", "divida atrasada", "d√≠vida vencida", "divida vencida", "dividas pendentes", "d√≠vidas pendentes", "o que devo?", "o que eu devo?", "t√¥ devendo?", "to devendo?", "tem d√≠vida?", "tem divida?", "tem contas pra eu pagar?", "tem boleto?", "ver boleto", "meus boletos", "ver boletos", "contas vencidas", "contas vencidas j√°", "alguma d√≠vida", "alguma divida", "dividas por favor", "d√≠vidas por favor", "relat√≥rio de d√≠vidas", "relat√≥rio de dividas", "relatorio de d√≠vidas", "relatorio de dividas", "relatorio de contas", "relat√≥rio de contas", "quais contas est√£o pendentes", "quais contas faltam", "tem boleto vencido?", "tem algo pra vencer?", "devo algo?", "contas vencendo", "devo pra algu√©m?", "devo pra algu√©m", "tenho d√≠vida?", "tenho divida?", "lista de pend√™ncias", "lista de pendencias", "pend√™ncias financeiras", "pendencias financeiras", "quais pend√™ncias", "quais pendencias", "me mostra pendencias", "me mostra pend√™ncias", "pendencia", "pend√™ncia"
]
for frase in dividas_frases:
    data.append((frase, "dividas"))
    data.append(("quero " + frase, "dividas"))
    data.append(("ver " + frase, "dividas"))
    data.append(("me diz " + frase, "dividas"))
    data.append(("me fala " + frase, "dividas"))
    data.append((frase + " por favor", "dividas"))
    data.append(("tem " + frase + "?", "dividas"))
    data.append(("tenho " + frase + "?", "dividas"))
    data.append(("mostra " + frase, "dividas"))
    data.append((frase + " üëÄ", "dividas"))
    data.append(("ver minhas " + frase, "dividas"))

# Saldo
saldo_frases = [
    "qual o meu saldo", "meu saldo", "quanto dinheiro eu tenho", "saldo atual", "quanto sobrou", "quanto tenho", "saldo", "ver saldo", "quanto ainda tenho", "quanto tenho de grana", "money atual", "grana atual", "quanto tem na conta", "quantos reais eu tenho", "saldo por favor", "saldo agora", "saldo banc√°rio", "saldo dispon√≠vel", "quero ver meu saldo", "quanto resta", "quanto resta na conta", "quanto dinheiro resta", "quanto tenho sobrando", "quanto tenho pra gastar", "quanto tenho dispon√≠vel", "saldo na conta", "quanto tenho de saldo", "saldo da conta", "me diz meu saldo", "mostra o saldo", "saldo total", "saldo final", "saldo zap", "saldo bot", "saldo ai"
]
for frase in saldo_frases:
    data.append((frase, "saldo"))
    data.append((frase + "?", "saldo"))
    data.append(("me mostra " + frase, "saldo"))
    data.append(("quero saber " + frase, "saldo"))
    data.append(("saldo " + frase, "saldo"))
    data.append(("quanto tenho " + frase, "saldo"))
    data.append(("dispon√≠vel " + frase, "saldo"))
    data.append(("tenho " + frase, "saldo"))

# Dica
dica_frases = [
    "me d√° uma dica financeira", "conselho de finan√ßas", "dica para economizar", "dica de grana", "alguma dica de dinheiro", "dica de economia", "me d√° uma dica", "quero dica financeira", "me aconselha", "me d√° um conselho financeiro", "tem alguma dica de finan√ßas?", "dica do dia", "manda uma dica", "me ensina a economizar", "dica pra guardar dinheiro", "dica pra juntar grana", "dica pra investir", "dica de investimento", "dica", "me ajuda a economizar", "tem alguma dica?", "tip financeiro", "dica de poupar", "me ensina a poupar", "dica de poupan√ßa", "me diz uma dica", "conselho pra economizar", "conselho do dia", "me fala uma dica", "me fala uma dica financeira", "alguma dica", "conselho?", "me aconselha ai", "algum conselho", "me da uma dica ai", "dica financeira ai", "tip do dia", "tip zap", "tip bot", "dica bot", "dica ai", "dica zap"
]
for frase in dica_frases:
    data.append((frase, "dica"))
    data.append(("tem " + frase + "?", "dica"))
    data.append(("me manda " + frase, "dica"))
    data.append(("quero " + frase, "dica"))
    data.append(("qual " + frase, "dica"))
    data.append(("dica " + frase, "dica"))
    data.append((frase + " por favor", "dica"))
    data.append((frase + " üôè", "dica"))
    data.append((frase + " üòÅ", "dica"))
    data.append(("manda uma " + frase, "dica"))

# Or√ßamento
orcamento_frases = [
    "meu or√ßamento", "ver or√ßamento", "relat√≥rio de or√ßamento", "orcamento mensal", "qual meu budget", "como est√° meu or√ßamento", "orcamento", "me mostra o or√ßamento", "mostra or√ßamento", "orcamento atual", "quero ver meu or√ßamento", "meu budget", "como est√° o budget", "ver meu or√ßamento", "relat√≥rio do or√ßamento", "budget", "status do or√ßamento", "me diz o or√ßamento", "plano financeiro", "meu plano financeiro", "ver plano financeiro", "mostra meu or√ßamento", "or√ßamento detalhado", "or√ßamento resumido", "resumo do or√ßamento", "meu or√ßamento atual", "relatorio financeiro", "financeiro", "relatorio mensal", "resumo financeiro", "relatorio do m√™s", "relatorio de gastos", "resumo do m√™s"
]
for frase in orcamento_frases:
    data.append((frase, "orcamento"))
    data.append(("ver " + frase, "orcamento"))
    data.append(("me mostra " + frase, "orcamento"))
    data.append(("mostra " + frase, "orcamento"))
    data.append((frase + " por favor", "orcamento"))
    data.append((frase + " do m√™s", "orcamento"))
    data.append((frase + " desse m√™s", "orcamento"))
    data.append((frase + " atual", "orcamento"))
    data.append(("quero saber " + frase, "orcamento"))
    data.append(("quero " + frase, "orcamento"))

# Voc√™ pode adicionar outros tipos de inten√ß√£o aqui...

df = pd.DataFrame(data, columns=["frase", "intencao"])

vectorizer = TfidfVectorizer()
X = vectorizer.fit_transform(df.frase)
y = df.intencao

clf = LogisticRegression(max_iter=1500)
clf.fit(X, y)

# Salva modelo e vetor em disco
pickle.dump(clf, open("intent_clf.pkl", "wb"))
pickle.dump(vectorizer, open("intent_vectorizer.pkl", "wb"))